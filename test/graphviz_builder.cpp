////////////////////////////////////////////////////////////////////////////////
//
//  YOUR QUILL
//
////////////////////////////////////////////////////////////////////////////////

#include <boost/ut.hpp>
#include <mithril/graphviz/Graphviz.hpp>
#include <mithril/graphviz/GraphvizBuilder.hpp>
#include <basic/Logging.hpp>

namespace ut = boost::ut;
using namespace ut;
using namespace yq;
using namespace yq::mithril;

std::string     dot_empty()
{
    Graphviz::Builder   gb("test");
    return gb.make_dot();
}

std::string     dot_ab()
{
    Graphviz::Builder gb("test");
    
    gb.node("a");
    gb.node("b");
    gb.edge("a", "b");
    return gb.make_dot();
}


ut::suite tests = []{
    "Build Empty"_test = []{
        std::string text    = dot_empty();
        expect(R"|(digraph test{
    bgcolor="#FFFFFF00";
}
)|" == text);
    };
    
    "Build AB"_test = []{
        std::string text    = dot_ab();
        expect(R"|(digraph test{
    bgcolor="#FFFFFF00";
    a [ shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPAdding="2"><TR><TD></TD></TR></TABLE>>];
    b [ shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPAdding="2"><TR><TD></TD></TR></TABLE>>];
    a -> b;
}
)|" == text);
    };
    
    "AB SVG"_test = []{
        std::string text    = dot_ab();
        std::string svg     = Graphviz::dot2svg(text);
        
        expect(R"|(<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 8.1.0 (20230707.0739)
 -->
<!-- Title: test Pages: 1 -->
<svg width="62pt" height="116pt"
 viewBox="0.00 0.00 62.00 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)">
<title>test</title>
<polygon fill="none" stroke="none" points="-4,4 -4,-112 58,-112 58,4 -4,4"/>
<!-- a -->
<g id="node1" class="node">
<title>a</title>
<polygon fill="none" stroke="black" points="24,-87 24,-93 30,-93 30,-87 24,-87"/>
</g>
<!-- b -->
<g id="node2" class="node">
<title>b</title>
<polygon fill="none" stroke="black" points="24,-15 24,-21 30,-21 30,-15 24,-15"/>
</g>
<!-- a&#45;&gt;b -->
<g id="edge1" class="edge">
<title>a&#45;&gt;b</title>
<path fill="none" stroke="black" d="M27,-72.05C27,-64.4 27,-55.16 27,-46.56"/>
<polygon fill="black" stroke="black" points="30.5,-46.79 27,-36.79 23.5,-46.79 30.5,-46.79"/>
</g>
</g>
</svg>
)|" == svg);
    };
    
};

int main(){
    log_to_std_output();
    return ut::cfg<>.run();
};
