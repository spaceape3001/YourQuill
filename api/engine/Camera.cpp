////////////////////////////////////////////////////////////////////////////////
//
//  YOUR QUILL
//
////////////////////////////////////////////////////////////////////////////////

//#pragma once

#include "Camera.hpp"
#include "CameraProxy.hpp"
#include "CameraInfoWriter.hpp"
#include <basic/DelayInit.hpp>
#include <basic/meta/Init.hpp>
#include <atomic>

namespace yq {
    namespace engine {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        CameraInfo::CameraInfo(std::string_view name, ObjectInfo& base, const std::source_location& sl) : 
            ObjectInfo(name, base, sl)
        {
            set_option(CAMERA);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        bool CameraProxy::operator==(const CameraProxy&) const noexcept = default;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Camera::Camera()
        {
            static std::atomic<uint64_t>    next = { 0 };
            m_id        = ++next;
            m_revision  = 0;
        }
        
        Camera::Camera(const Camera&) : Camera()
        {
        }

        Camera::~Camera()
        {
        }

        void    Camera::changed()
        {
            ++m_revision;
        }

        CameraProxy     Camera::proxy() const
        {
            return { m_id, m_revision, world2screen() };
        }
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        YQ_INVOKE(
            [[maybe_unused]] auto rend   = writer<Camera>();
        )
    }
}

YQ_OBJECT_IMPLEMENT(yq::engine::Camera)
